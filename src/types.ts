export type RaveCountry = 'NG' | 'GH' | 'KE' | 'ZA'

export type RaveCurrency<T extends RaveCountry> =
  | (T extends 'NG' ? 'NGN' | 'USD' | 'EUR' | 'GBP' | 'UGX' | 'TZS' : undefined)
  | (T extends 'GH' ? 'GHS' | 'USD' : undefined)
  | (T extends 'KE' ? 'KES' : undefined)
  | (T extends 'ZA' ? 'ZAR' : undefined)
  | (T extends any ? any : any)

export interface RaveError {
  status: 'error'
  message: string
  data?: {
    code: string
    message: string
  }
}

/**
 * PIN: only local MasterCard and verve cards use PIN as an auth model.
 * 3DSecure: only VISA CARD and some other MASTER CARD support 3DSecure
 */
export type RaveAuth =
  | 'PIN'
  | '3DSecure'
  | 'AVS'
  | 'GTB_OTP'
  | 'VBVSECURECODE'
  | 'Noauth'
  | 'NOAUTH_INTERNATIONAL'
export type CardType = 'card' | 'recurring billing'

export type MobileMoneyType =
  | 'MOBILEMONEYZM_TRANSACTION'
  | 'MOBILEMONEYGH_TRANSACTION'
  | 'MOBILEMONEYRW_TRANSACTION'
export type PaymentType =
  | CardType
  | 'recurring billing'
  | 'ussd'
  | 'account'
  | 'mobilemoneygh'

export interface CardPaymentData<T extends RaveCountry, S extends PaymentType> {
  /**
   * Shared parameters
   */
  country: T // This is the pair country for the transaction with respect to the currency.Defaults to NG
  currency: RaveCurrency<T> // This is the specified currency to charge the card in.default NGN
  amount: string // This is the amount to be charged from card it is passed as - (“amount”:10).
  email: string // This is the email address of the customer.
  phonenumber?: string // This is the phone number of the customer.
  firstname?: string // This is the first name of the card holder or the customer.
  lastname?: string // This is the last name of the card holder or the customer.
  txRef: string // This is the unique reference, unique to the particular transaction being carried out. It is generated by the merchant for every transaction
  device_fingerprint?: string // This is the fingerprint for the device being used. It can be generated using a library on whatever platform is being used.
  IP: string // IP - Internet Protocol. This represents the current IP address of the customer carrying out the transaction.
  meta?: any[]
  redirect_url?: string

  /**
   * Card payload
   */
  cardno: S extends 'card' | 'recurring billing' ? string : undefined // This is the number on the cardholders card. E.g. 5399 6701 2349 0229.
  cvv: S extends 'card' | 'recurring billing' ? string : undefined // This is the 3-digit number at the back of the card.
  expirymonth: S extends 'card' | 'recurring billing' ? string : undefined // This is the month of card expiration as written on a cardholder’s card. Format is ‘MM’.
  expiryyear: S extends 'card' | 'recurring billing' ? string : undefined // This is the year of card expiration on as written on a cardholder’s card. Format is ‘YY’.
  pin: S extends 'card' | 'recurring billing' ? string : undefined // This is the pin issued to the customer for his card. Used only for transactions that require PIN
  suggested_auth: S extends 'card' | 'recurring billing' ? RaveAuth : undefined // this is an identifier to show that the suggested authentication model is being used.
  charge_type?:
    | (S extends 'card' ? 'preauth' | undefined : undefined)
    | (S extends 'recurring billing' ? 'preauth' : undefined) // This identifies that you are making a preauthorised payment request call to the charge endpoint by passing the value preauth. It should be built with your payment request only when carrying out a preauthorised transaction.

  /**
   * Account payload
   */
  // accountnumber: S extends 'account' ? string : undefined; // This is the account number of the customer associated with a valid bank account.
  // accountbank: S extends 'account' ? string : undefined; // This is a bank code that represents the bank account to be debited. To get a list of banks in Nigeria, call the List of Banks API
  // payment_type: S extends 'account' ? 'account' : undefined;

  /**
   * Recurring bill payload
   */
  // payment_plan: S extends 'recurring billing' ? string : undefined;
}

export interface ChargeRequest {
  client: string
  PBFPubKey: string
  alg: string
}

export interface ChargeResponse<T extends RaveCountry, S extends PaymentType> {
  /**
   * The status object inside the data object
   * is the right status to check for, possible values
   */
  status:
    | 'success'
    | 'failed'
    | 'pending'
    | 'success-pending-validation'
    | 'pending-validation'
  message: string
  data: {
    id: number
    txRef: string
    orderRef: string | null
    amount: number
    appfee: number
    merchantfee: number
    merchantbearsfee: number
    flwRef: string
    redirectUrl: string
    device_fingerprint: string
    settlement_token: string | null
    charged_amount: number
    cycle: 'one-time'
    /**
     * This is the response code of the transaction,
     * it typically tells you when a transaction is successful
     * with a response code 00 or when the transaction requires validation 02
     */
    chargeResponseCode: '00' | '02'
    chargeResponseMessage: string
    authModelUsed: RaveAuth
    currency: RaveCurrency<T>
    IP: string
    narration: string
    status: string
    authurl: string
    vbvrespmessage: string
    vbvrespcode: string
    acctvalrespmsg: string | null
    acctvalrespcode: string | null
    paymentType: PaymentType
    paymentId: string
    fraud_status: string
    charge_type: string
    is_live: 0 | 1
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    customerId: number
    AccountId: number
    customer: {
      id: number
      phone: string | null
      fullName: string
      customertoken: string | null
      email: string
      createdAt: Date
      updatedAt: Date
      deletedAt: null
      AccountId: number
    }
    /**
     * This object contains the instructions you are meant to show
     * to the customer so they know the next step to take,
     * it typically tells them how to validate the transaction.
     */
    validateInstructions: {
      valparams: ['OTP']
      instruction: 'Please validate with the OTP sent to your mobile or email'
    }
  }
}

export interface ValidationPaymentPayload {
  PBFPubKey: string // This is your merchant public key.
  transactionreference: string // his is the flwRef returned in the Initiate payment response.
  otp: string // This is the one time pin inputed by the customer.
}

export interface CardTransactionWebhookResponse {
  id: number
  txRef: string
  flwRef: string
  orderRef: string
  paymentPlan: string | null
  createdAt: Date
  amount: number
  charged_amount: number
  status: string
  IP: string
  currency: string
  customer: {
    id: number
    phone: string
    fullName: string
    customertoken: string | null
    email: string
    createdAt: Date
    updatedAt: Date
    deletedAt: null
    AccountId: number
  }
  entity: {
    card6: string
    card_last4: string
  }
  'event.type':
    | 'CARD_TRANSACTION'
    | 'MOBILEMONEYGH_TRANSACTION'
    | 'MPESA_TRANSACTION'
    | 'ACCOUNT_TRANSACTION'
    | 'Transfer'
    | 'BANK_TRANSFER_TRANSACTION'
}
